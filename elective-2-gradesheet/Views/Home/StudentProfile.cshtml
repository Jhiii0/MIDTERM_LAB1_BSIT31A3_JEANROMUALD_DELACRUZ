@using elective_2_gradesheet.Data.Entities
@model StudentProfileViewModel


@{
    ViewData["Title"] = "Student Profile";
}

<div class="container mt-5">
    <div class="card mb-4">
        <div class="card-header">
            <h3>@Model.StudentFullName</h3>
        </div>
        <div class="card-body">
            <p><strong>Section:</strong> @Model.SectionName</p>
        </div>
    </div>

    <h4 class="mb-3">Activities</h4>

    <!-- Filter Form -->
    <form asp-action="StudentProfile" method="get" class="mb-4 p-3 border rounded">
        <input type="hidden" name="id" value="@Model.StudentId" />
        <div class="row g-3 align-items-end">
            <div class="col-md-4">
                <label class="form-label">Filter by Period:</label>
                <select name="period" asp-for="CurrentPeriod" asp-items="Html.GetEnumSelectList<GradingPeriod>()" class="form-control">
                    <option value="">All Periods</option>
                </select>
            </div>
            <div class="col-md-2">
                <button type="submit" class="btn btn-primary w-100">Filter</button>
            </div>
        </div>
    </form>

    <!-- Bulk Add Section -->
    <div class="card mt-5 mb-4">
        <div class="card-header">
            <h5>Bulk Add Missing Activities</h5>
        </div>
        <div class="card-body">
            <!-- Added id="bulkAddForm" and AntiForgeryToken -->
            <form id="bulkAddForm" asp-action="BulkAddMissingActivities" method="post">
                <input type="hidden" name="studentId" value="@Model.StudentId" />
                @Html.AntiForgeryToken() <!-- Anti-forgery token for security -->
                <div class="row g-3 align-items-end">
                    <div class="col-md-4">
                        <label for="bulkAddPeriod" class="form-label">Grading Period for Bulk Add:</label>
                        <select id="bulkAddPeriod" name="gradingPeriod" asp-items="Html.GetEnumSelectList<GradingPeriod>()" class="form-control" required>
                            <option value="">Select Period</option>
                        </select>
                    </div>
                    <div class="col-md-2">
                        <button type="submit" class="btn btn-warning w-100">Bulk Add Missing</button>
                    </div>
                </div>
            </form>
        </div>
    </div>
    <!-- End Bulk Add Section -->

    <div class="table-responsive">
        <table class="table table-striped table-bordered">
            <thead class="thead-dark">
                <tr>
                    <th>
                        <a asp-action="StudentProfile" asp-route-id="@Model.StudentId" asp-route-sortOrder="@ViewData["PeriodSortParm"]" asp-route-period="@Model.CurrentPeriod">Period</a>
                    </th>
                    <th>Activity Name</th>
                    <th>Status</th>
                    <th>Points</th>
                    <th>Max Points</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model.Activities)
                {
                    <tr class="@(item.Status == "Missing" ? "table-warning" : "")">
                        <td>@item.GradingPeriod</td>
                        <td>@item.ActivityName</td>
                        <td>@item.Status</td>
                        <td>@item.Points</td>
                        <td>@item.MaxPoints</td>
                        <td class="align-content-center">
                            @if (item.Status == "Missing")
                            {
                                <a href="#" class="add-activity" data-bs-toggle="modal" data-bs-target="#editActivityModal"
                                   data-activity-id="0"
                                   data-activity-name="@item.ActivityName"
                                   data-points="0"
                                   data-max-points="@item.MaxPoints"
                                   data-period="@item.GradingPeriod"
                                   data-tag=""
                                   data-status="Missing">
                                    <span class="badge bg-secondary float-end">Fix</span>
                                </a>
                            }
                            else
                            {
                                <a href="#" class="edit-activity" data-bs-toggle="modal" data-bs-target="#editActivityModal"
                                   data-activity-id="@item.ActivityId"
                                   data-activity-name="@item.ActivityName"
                                   data-points="@item.Points"
                                   data-max-points="@item.MaxPoints"
                                   data-period="@item.GradingPeriod"
                                   data-tag="@item.Tag"
                                   data-github-link="@item.GithubLink"
                                   data-status="Submitted">
                                    <span class="badge bg-primary float-end">Edit</span>
                                </a>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<div class="modal fade" id="editActivityModal" tabindex="-1" aria-labelledby="editActivityModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editActivityModalLabel">Edit Activity</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form asp-action="UpdateActivity" method="post">
                <div class="modal-body">
                    <input type="hidden" name="studentId" value="@Model.StudentId" />
                    <input type="hidden" id="editActivityId" name="activityId" />
                    <input type="hidden" id="editActivityNameInput" name="activityName" />

                    <div class="mb-3">
                        <label class="form-label">Activity Name</label>
                        <p id="editActivityName" class="form-control-plaintext"></p>
                    </div>

                    <div class="mb-3">
                        <div class="mb-3">
                            <label for="editPoints" class="form-label">Points</label>
                            <input type="number" id="editPoints" name="points" class="form-control" step="any" required />
                        </div>

                        <div class="mb-3" id="maxPointsContainer">
                            <label for="editMaxPoints" class="form-label">Max Points</label>
                            <input type="number" id="editMaxPoints" name="maxPoints" class="form-control" step="any" required />
                        </div>
                    </div>

                    <div class="mb-3" id="githubLinkContainer">
                        <label for="editGithubLink" class="form-label">Github Link</label>
                        <input type="text" id="editGithubLink" name="githubLink" class="form-control" />
                    </div>

                    <div class="mb-3" id="periodContainer">
                        <label for="editPeriod" class="form-label">Grading Period</label>
                        <select id="editPeriod" name="period" asp-items="Html.GetEnumSelectList<GradingPeriod>()" class="form-control" required></select>
                    </div>

                    <div class="mb-3" id="statusContainer">
                        <label for="editStatus" class="form-label">Status</label>
                        <select id="editStatus" name="status" class="form-control" required>
                            <option value="Added">Added</option>
                            <option value="Turned in">Turned in</option>
                            <option value="Missing">Missing</option>
                        </select>
                    </div>
                    <div class="mb-3" id="tagContainer">
                        <label for="editTag" class="form-label">Tag</label>
                        <select id="editTag" name="tag" class="form-control" required>
                            <option value="Assignment">Assignment</option>
                            <option value="Hands-on">Hands-on</option>
                            <option value="Other">Other</option>
                        </select>
                    </div>
                    <div class="mb-3" id="otherTagContainer" style="display: none;">
                        <label for="otherTag" class="form-label">Custom Tag</label>
                        <input type="text" id="otherTag" name="otherTag" class="form-control" placeholder="Not assignment or hands-on" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-primary">Save changes</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Toast Container -->
<div class="toast-container position-fixed bottom-0 end-0 p-3">
    <div id="liveToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-header">
            <strong class="me-auto" id="toastHeader">Notification</strong>
            <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
        <div class="toast-body" id="toastBody">
            <!-- Message will be injected here -->
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            var editModal = document.getElementById('editActivityModal');
            var tagSelect = editModal.querySelector('#editTag');
            var otherTagContainer = editModal.querySelector('#otherTagContainer');
            var otherTagInput = editModal.querySelector('#otherTag');

            // Containers for elements to hide/show
            var githubLinkContainer = editModal.querySelector('#githubLinkContainer');
            var periodContainer = editModal.querySelector('#periodContainer');
            var tagContainer = editModal.querySelector('#tagContainer');
            var maxPointsContainer = editModal.querySelector('#maxPointsContainer');
            var statusContainer = editModal.querySelector('#statusContainer');

            tagSelect.addEventListener('change', function() {
                if (this.value === 'Other') {
                    otherTagContainer.style.display = 'block';
                    otherTagInput.required = true;
                } else {
                    otherTagContainer.style.display = 'none';
                    otherTagInput.required = false;
                    otherTagInput.value = '';
                }
            });

            editModal.addEventListener('show.bs.modal', function (event) {
                var button = event.relatedTarget;
                var activityId = button.getAttribute('data-activity-id');
                var newId = button.getAttribute('data-new-id');
                var activityName = button.getAttribute('data-activity-name');
                var points = button.getAttribute('data-points');
                var maxPoints = button.getAttribute('data-max-points');
                var period = button.getAttribute('data-period');
                var tag = button.getAttribute('data-tag');
                var githubLink = button.getAttribute('data-github-link');
                var status = button.getAttribute('data-status');

                var activityIdInput = editModal.querySelector('#editActivityId');
                var activityNameP = editModal.querySelector('#editActivityName');
                var activityNameHiddenInput = editModal.querySelector('#editActivityNameInput');

                var pointsInput = editModal.querySelector('#editPoints');
                var periodSelect = editModal.querySelector('#editPeriod');
                var tagSelect = editModal.querySelector('#editTag');
                var githubLinkInput = editModal.querySelector('#editGithubLink');
                var maxPointsInput = editModal.querySelector('#editMaxPoints');
                var statusSelect = editModal.querySelector('#editStatus');

                activityIdInput.value = activityId;
                activityNameP.textContent = activityName;
                activityNameHiddenInput.value = activityName; 
                pointsInput.value = points;

                // Set period dropdown
                for (var i = 0; i < periodSelect.options.length; i++) {
                    if (periodSelect.options[i].text.toUpperCase() === period.toUpperCase()) {
                        periodSelect.selectedIndex = i;
                        break;
                    }
                }

                // Set status dropdown
                statusSelect.value = status;

                // Determine form behavior based on status
                if (status === "Missing") {
                    githubLinkContainer.style.display = 'block';
                    periodContainer.style.display = 'block';
                    tagContainer.style.display = 'block';
                    maxPointsContainer.style.display = 'block';
                    statusContainer.style.display = 'block';

                    githubLinkInput.value = '';
                    pointsInput.value = '';
                    maxPointsInput.value = maxPoints;

                    statusSelect.value = "Added";

                    var tagOptions = ['Assignment', 'Hands-on'];
                    if (tag && tagOptions.includes(tag)) {
                        tagSelect.value = tag;
                        otherTagContainer.style.display = 'none';
                        otherTagInput.required = false;
                    } else {
                        tagSelect.value = 'Other';
                        otherTagContainer.style.display = 'block';
                        otherTagInput.required = true;
                        otherTagInput.value = tag || '';
                    }

                } else {
                    githubLinkContainer.style.display = 'block';
                    periodContainer.style.display = 'none';
                    tagContainer.style.display = 'none';
                    maxPointsContainer.style.display = 'block';
                    statusContainer.style.display = 'none';

                    maxPointsInput.readOnly = true;

                    githubLinkInput.value = githubLink;
                    maxPointsInput.value = maxPoints;

                    githubLinkInput.required = false;
                    tagSelect.required = false;
                    periodSelect.required = false;
                    maxPointsInput.required = false;
                    statusSelect.required = false;

                    var tagOptions = ['Assignment', 'Hands-on'];
                    if (tag && tagOptions.includes(tag)) {
                        tagSelect.value = tag;
                        otherTagContainer.style.display = 'none';
                        otherTagInput.required = false;
                    } else {
                        tagSelect.value = 'Other';
                        otherTagContainer.style.display = 'none';
                        otherTagInput.required = true;
                        otherTagInput.value = tag || '';
                    }
                }
            });
        });

        // Reusable Toast Display Function
        function showToast(message, type) {
            var toastElement = document.getElementById('liveToast');
            var toastHeader = document.getElementById('toastHeader');
            var toastBody = document.getElementById('toastBody');
            
            // Clear previous classes
            toastElement.classList.remove('text-bg-success', 'text-bg-info', 'text-bg-danger');

            toastBody.textContent = message;
            toastElement.classList.add('text-bg-' + type);
            // Set header text (e.g., "Success", "Info", "Danger")
            toastHeader.textContent = type.charAt(0).toUpperCase() + type.slice(1); 

            var toast = new bootstrap.Toast(toastElement);
            toast.show();
        }

        // Bulk Add Form Submission Handler
        document.addEventListener('DOMContentLoaded', function () {
            var bulkAddForm = document.getElementById('bulkAddForm');

            if (bulkAddForm) {
                bulkAddForm.addEventListener('submit', async function (event) {
                    event.preventDefault(); // Prevent default form submission (page refresh)

                    const studentId = this.querySelector('input[name="studentId"]').value;
                    const gradingPeriodSelect = this.querySelector('select[name="gradingPeriod"]');
                    const gradingPeriod = gradingPeriodSelect.value;

                    if (!gradingPeriod) {
                        showToast("Please select a grading period for bulk add.", "danger");
                        return;
                    }

                    const formData = new FormData();
                    formData.append('studentId', studentId);
                    formData.append('gradingPeriod', gradingPeriod);

                    try {
                        const response = await fetch(this.action, {
                            method: 'POST',
                            body: formData,
                            headers: {
                                // Include anti-forgery token from the hidden input
                                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value 
                            }
                        });

                        const result = await response.json();

                        showToast(result.message, result.type);

                        // If activities were added, refresh the page after a short delay
                        if (result.success && result.addedCount > 0) {
                            setTimeout(() => {
                                // Reload the page with the current student ID and selected period to show updated data
                                window.location.href = `@Url.Action("StudentProfile", "Home", new { id = Model.StudentId })?period=${gradingPeriod}`;
                            }, 1500); // Reload after 1.5 seconds
                        }

                    } catch (error) {
                        console.error('Error during bulk add:', error);
                        showToast('An unexpected error occurred during bulk add.', 'danger');
                    }
                });
            }

            // Existing Toast Initialization and Display Logic (for TempData)
            // This part handles toasts from initial page load (e.g., after a redirect from another action)
            // This is kept for any other redirects that might use TempData.
            var toastMessageFromTempData = "@TempData["ToastMessage"]";
            var toastTypeFromTempData = "@TempData["ToastType"]";

            if (toastMessageFromTempData && toastMessageFromTempData !== "") {
                showToast(toastMessageFromTempData, toastTypeFromTempData);
            }
        });
    </script>
}